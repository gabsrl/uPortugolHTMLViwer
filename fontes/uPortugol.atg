import java.io.*;
import java.util.ArrayList;

/**
 * @Author: Gabriel Rocha de Lima (grl@icomp.ufam.edu.br)
 * Exerc√≠cio de Compiladores lecionado por Marco Cristo (Icomp/UFAM)
 * Icomp/UFAM - AM - Brasil
 * Sun Nov, 15, 2020
 */

class HtmlTransformer {
    //ArrayList<String> inputWords;
    String line;
	String html;
	FileWriter writer;
	static String htmlCssRef = "<link href=\"style.css\" rel=\"stylesheet\">";
	static String marginLeftProp = "margin-left:";

	static String classComments = "comments";
	static String classType = "types";
	static String classFunc = "funcs";
	static String classBlock = "blocks";
	static int identation = 0;
	static int baseOffsetIdentation = 10; // 10px

    public HtmlTransformer() {
		try {
			this.line = "";
			this.html = "<html><head>" + htmlCssRef + "<title>uPortugol</title></head><body>";
			this.writer = new FileWriter("uPortugol.html");
		} catch(IOException e) {
			System.out.println("Falha ao abrir/criar o arquivo html " + e.getMessage());
		}
	}


	public void newLine() { 
		int i = 0;

		while( i < identation) {
			i += 5;
		}
		this.html += "<p style=" + "\"" + marginLeftProp + i + "px;\">";
	}

	public void identNewLine() {
		identation += baseOffsetIdentation;
		this.newLine();
	}

	public void closeNewLine() { this.html += "</p>"; }

	public void exdentNewLine() {
		identation-= baseOffsetIdentation;
		this.newLine();
	}

	
	public void append(String genericStrToappend) {
		this.html += genericStrToappend;
	}
	/**
	 * Stylize "procedimento $procedureName"
	 */
	public void procedureName(String procedureName) {
		String tagSpan = this.getOpeningSpan(classFunc);
		String tagSpanClosing = this.getClosingSpan();
		this.html += tagSpan + "procedimento " +  procedureName + tagSpanClosing;
	}

	public String getOpeningSpan(String styleClass) {
		return "<span " + "class=\"" + styleClass + "\">";
	}
	
	public String getClosingSpan() {
		return "</span>";
	}
	
	public void finish() {
		try {
			this.html += "</body></html>";
			this.writer.write(this.html);
			this.writer.close();
			System.out.println("O arquivo foi gravado com sucesso!");
		} catch(IOException e) {
			System.out.println("Falha ao salvar o arquivo html " + e.getMessage());
		}

	}

	public void debugln(String s) {
        System.out.println(s);
    }

	public void debug(String s) {
        System.out.print(s + " ");
	}
}

COMPILER UPortugol

HtmlTransformer handler = new HtmlTransformer();

CHARACTERS
	letterLower = 'a'..'z' .
	letterUpper = 'A'..'Z' .
    letra = 'A'..'Z' + 'a'..'z'.
    upperLetters = 'A'..'Z' .
    digit = "0123456789".

TOKENS
	ident = letterLower { letterLower | letterUpper | digit } .
	number = digit { digit } .
	constantNumber = letterUpper { letterUpper } .

IGNORE '\t' + '\r' + '\n'

PRODUCTIONS
    UPortugol   (. String declaration = ""; .)
	= ["algoritmo" ident]
		{ 
			ConstantDeclaration 
		} 
		{ 
			Procedure
		}
		"inicio"
			{ Cmd }
		"fim"										(. handler.finish(); .)
    .

	Cmd												(. String varDeclaration = ""; .)
	= 																	
			Read
			| 	Instruction
			|	VariableDeclaration <out varDeclaration>
			|	"enquanto"	Expr "faca" { Cmd } "fimenquanto"
			|	"repita" Cmd { Cmd } "ate" Instruction
			|	"para" Expr "=" Expr "ate" Expr "passo" number "faca" Cmd { Cmd } "fimpara"
			|	"caso" ident { "seja" number "faca"  Cmd { Cmd } } "outrocaso" ":" Cmd { Cmd } "fimcaso"
			|	"retorne" Expr ";"
			|	"se" Expr "entao" Cmd { Cmd } [ "senao" Cmd { Cmd } ] "fimse" ";"
	.

	Instruction (. String newInteger = ""; .)
	= Expr [ "=" 
		(Expr
		| NewInteger<out newInteger>
		) 
	] ";".


    Read    									(. String readFromKeyboard = ""; .)
    = "leia"									(. handler.debug(t.val); .)
        "(" 
            Variable<out readFromKeyboard> 		(. handler.debug(readFromKeyboard); .)
        ")" ";" 
    .

	Procedure									(. String varDecl = ""; .)
	= ProcedureDeclaration
		"inicio" 								(. handler.identNewLine(); handler.append("inicio"); handler.closeNewLine(); .)
			{								
				VariableDeclaration<out varDecl>
			 } "fim"								(. 
														handler.newLine();
														handler.append("fim"); handler.closeNewLine();
														handler.exdentNewLine();
													.)
	.

    ProcedureDeclaration
    = "procedimento"							(. handler.newLine(); .)
        ident 									(. handler.procedureName(t.val); .)
        "("										(. handler.append("("); .)
            [
				ProcedureParams
				{
					"," ProcedureParams 
				} 
            ]
		")"										(. handler.append(")"); .)
			[
				":" "inteiro"					(. handler.append(": inteiro"); .)
			] 									(. handler.closeNewLine(); .)
    .

    ProcedureParams             		(. String paramName=""; .)
    = Variable<out paramName>        	(. .)
        ":"
			"inteiro" 
			[
				"[" "]"
			]
    .

	NewInteger<out String newInt> 
	= "novo" "inteiro" 
		( 
			"[" 
				Expr 
			"]"
			| 
			"{" 
				number 
				{ 
					"," number 
				} 
			"}"
    	) (. newInt = t.val; .)
    .

    VariableDeclaration<out String declaration> 					(. String var = ""; .)
    	= "variavel" Variable<out var> 									
        	{
            	"," Variable<out var> 									
			} ":" 

			"inteiro" 
			[
				"[" "]"
			]
			
		";" 														(. declaration = t.val; .)
    .

    Variable<out String var>
    =  ident (. handler.debug(t.val); var = t.val; .)
	.

	ConstantDeclaration									(. String declaredConstant = ""; .)
	= "constante" Constant<out declaredConstant>
			"=" number 									(. handler.debugln(t.val); .)
		";"
	.

	Constant<out String constant>
	= constantNumber (. handler.debug(t.val); constant = t.val; .)
	.
	
	Expr
	= AriExpr
		[
			RelOp
			AriExpr
		]
	.

	AriExpr
	= Term
		{
			(
				"+"
				| "-"
			)
			Term
		}
		
	.

	Term
	= Fator
		{
			(
				"*"
				| "/"
				| "%"
			)
			Fator
		}
	.

	Fator (. String cons = ""; .)
	= Name
		| number
		| "-" Fator
		| 	"("
				Expr 
			")"
		| Constant<out cons>
	.

	Name
	= ident [ "("  [ ArgList ] ")" | "[" Expr "]" ]
	.

	ArgList
	= Expr { "," Expr }
	.
	
	RelOp
	= "=="
		|"!="
		| "<"
		| ">" 
		| "<="
		| ">="
	.

END UPortugol.