import java.io.*;
import java.util.ArrayList;

/**
 * @Author: Gabriel Rocha de Lima (grl@icomp.ufam.edu.br)
 * Exercício de Compiladores lecionado por Marco Cristo (Icomp/UFAM)
 * Icomp/UFAM - AM - Brasil
 * Sun Nov, 15, 2020
 */

class HtmlTransformer {
    //ArrayList<String> inputWords;
    String line;
	String html;
	FileWriter writer;
	static String htmlCssRef = "<link href=\"style.css\" rel=\"stylesheet\">";
	static String marginLeftProp = "margin-left:";

	static String classComments = "comments";
	static String classType = "types";
	static String classFunc = "funcs";
	static String classBlock = "blocks";
	static int identation = 0;
	static int baseOffsetIdentation = 20; // 10px

    public HtmlTransformer() {
		try {
			this.line = "";
			this.html = "<html><head>" + htmlCssRef + "<title>uPortugol</title></head><body>";
			this.writer = new FileWriter("uPortugol.html");
		} catch(IOException e) {
			System.out.println("Falha ao abrir/criar o arquivo html " + e.getMessage());
		}
	}

	public void indent() {
		identation += baseOffsetIdentation;
	}

	public void exdent() {
		identation-= baseOffsetIdentation;
	}

	public void newLine() { 
		int i = 0;

		while( i < identation) {
			i += 5;
		}
		this.html += "<p style=" + "\"" + marginLeftProp + i + "px;\">";
	}

	public void identNewLine() {
		identation += baseOffsetIdentation;
		this.newLine();
	}

	public void closeNewLine() { this.html += "</p>"; }

	public void exdentNewLine() {
		identation-= baseOffsetIdentation;
		this.newLine();
	}

	
	public void append(String genericStrToappend) {
		this.html += genericStrToappend;
	}

	public void append(String keyStr, String type) {
		String tagSpan = this.getOpeningSpan(type);
		String tagSpanClosing = this.getClosingSpan();
		this.html += tagSpan + keyStr + tagSpanClosing;
	}

	/**
	 * Stylize "procedimento $procedureName"
	 */
	public void procedureName(String procedureName) {
		String tagSpan = this.getOpeningSpan(classFunc);
		String tagSpanClosing = this.getClosingSpan();
		this.html += tagSpan + "procedimento " +  procedureName + tagSpanClosing;
	}

	public String getOpeningSpan(String styleClass) {
		return "<span " + "class=\"" + styleClass + "\">";
	}
	
	public String getClosingSpan() {
		return "</span>";
	}
	
	public void finish() {
		try {
			this.html += "</body></html>";
			this.writer.write(this.html);
			this.writer.close();
			System.out.println("O arquivo foi gravado com sucesso!");
		} catch(IOException e) {
			System.out.println("Falha ao salvar o arquivo html " + e.getMessage());
		}

	}

	public void debugHtml() {
		this.newLine(); 
		this.append("teste-comando"); 
		this.closeNewLine();
	}

	public void debugln(String s) {
        System.out.println(s);
    }

	public void debug(String s) {
        System.out.print(s + " ");
	}
}

COMPILER UPortugol

HtmlTransformer handler = new HtmlTransformer();

CHARACTERS
	letterLower = 'a'..'z' .
	letterUpper = 'A'..'Z' .
    letra = 'A'..'Z' + 'a'..'z'.
    upperLetters = 'A'..'Z' .
    digit = "0123456789".

TOKENS
	ident = letterLower { letterLower | letterUpper | digit } .
	number = digit { digit } .
	constantNumber = letterUpper { letterUpper } .

IGNORE '\t' + '\r' + '\n'

PRODUCTIONS
    UPortugol   (. String declaration = ""; .)
	= [
		"algoritmo"										
		ident											(.
															handler.newLine();
															handler.append("algoritmo" + " ", HtmlTransformer.classType);
															handler.append(t.val);
															handler.closeNewLine();
														.)
	]
		{ 
			ConstantDeclaration 
		} 
		{ 
			Procedure
		}
		"inicio"										(.	
															handler.newLine();
															handler.append("inicio", HtmlTransformer.classBlock);
															handler.closeNewLine();
															handler.indent();
														.)
			Cmd
				{ 
					Cmd 
				}
		"fim"											(. 
															handler.exdent();
															handler.newLine();
															handler.append("fim", HtmlTransformer.classBlock);
															handler.finish(); 
														.)
    .

	Cmd														(. String varDeclaration = ""; .)
	= 																	
			Read
			| 	(.	handler.newLine(); .) Instruction
			|	VariableDeclaration <out varDeclaration>
			|	"enquanto"									(. 
																handler.newLine();
																handler.append("enquanto" + " ", HtmlTransformer.classBlock);
															.)
					Expr 									
				"faca"										(. 
																handler.append(" " + "faca", HtmlTransformer.classBlock);
																handler.closeNewLine();
																handler.indent(); //adding new indent
															.) 
				{ 
					Cmd
				} 
				"fimenquanto"								(.
																handler.exdent();
																handler.newLine();
																handler.append("fimenquanto", HtmlTransformer.classBlock);
																handler.closeNewLine();
															.)

			|	"repita"									(.
																handler.newLine();
																handler.append("repita", handler.classBlock);
																handler.closeNewLine();
																handler.indent();
															.)	
					Cmd
					{ 
						Cmd 
					} 
					"ate" 									(. 
																handler.exdent();
																handler.newLine();
																handler.append("ate" +  " ", HtmlTransformer.classBlock);

															.)
					Instruction								(. 
																handler.closeNewLine();
															.)

			|	"para"										(.
																handler.newLine();
																handler.append("para" + " ", HtmlTransformer.classBlock);
															.)
					Expr
						"=" 								(.	handler.append("=" + " "); .)
					Expr
				"ate" 										(. handler.append("ate" + " ", HtmlTransformer.classBlock); .)
					Expr
				"passo" 									(. handler.append("passo" + " ", HtmlTransformer.classBlock); .)
					number 									(. handler.append(t.val + " "); .)
				"faca"										(. 
																handler.append("faca", HtmlTransformer.classBlock);
																handler.closeNewLine();
																handler.indent();
															.)
					Cmd
					{ 
						Cmd 
					} "fimpara"								(. 
																handler.exdent();
																handler.newLine();
																handler.append("fimpara", HtmlTransformer.classBlock);
																handler.closeNewLine();
															.)

			|	"caso"										(.
																handler.newLine();
																handler.append("caso" + " ");
															.)																			
					ident 									(.	
																handler.append(t.val);
																handler.closeNewLine();
																handler.indent(); 
															.)
					{ 
						"seja" 								(.	handler.newLine();
																handler.append("seja" + " "); 
															.)
							number 							(.	handler.append(t.val + " "); .)
						"faca"								(. 
																handler.append("faca");
																handler.closeNewLine();
																handler.indent();
															.)
							Cmd 
							{ 
								Cmd 
							}
															(.	handler.exdent(); .) 
					}
					"outrocaso" ":"							(. 
																handler.newLine();
																handler.append("outrocaso:");
																handler.closeNewLine();
																handler.indent();
															.)
						Cmd 
						{ 
							Cmd 
						} 
															(.	handler.exdent(); .)
					"fimcaso"								(.
																handler.exdent();
																handler.newLine();
																handler.append("fimcaso");
																handler.closeNewLine();
															.)

			|	"retorne" 									(.	
																handler.newLine();
																handler.append("retorne" + " ", HtmlTransformer.classType);
															.)
					Expr 									(.	
																handler.append("expr" + ";");
																handler.closeNewLine();
															.)
				";"

			|	"se"										(.	
																handler.newLine();
																handler.append("se" + " ", HtmlTransformer.classBlock);
															.)
					Expr 										
				"entao"										(.	handler.append("entao", HtmlTransformer.classBlock); 
																handler.closeNewLine();
																handler.indent();
															.)
					Cmd
					{ 
						Cmd 
					} 
															(.	handler.exdent(); .)
					[
						"senao"								(.	handler.newLine();
																handler.append("senao", HtmlTransformer.classBlock);
																handler.closeNewLine();
																handler.indent();
															.)
							Cmd
							{ 
								Cmd 
							} 
															(.
																handler.exdent();
															.)
					] "fimse" ";"							(.
																handler.newLine();
																handler.append("fimse", HtmlTransformer.classBlock);
																handler.append(";");
																handler.closeNewLine();
															.)
	.

	Instruction (. String newInteger = ""; .)
	= Expr 												
		[ 
			"="											(.	handler.append(" " + "=" + " "); .) 
			(
				Expr
				| NewInteger<out newInteger>
			) 
		] ";"											(.	handler.append(";");
															handler.closeNewLine(); 
														.)
	.


	Procedure										(. String varDecl = ""; .)
	= ProcedureDeclaration
		"inicio" 									(. 
														handler.identNewLine();  //creating new line with adjustments on indent
														handler.append("inicio", HtmlTransformer.classBlock);
														handler.closeNewLine(); 
														handler.indent();
													.)
				Cmd
				{ 
					Cmd 
				}									
													(. handler.exdent(); .)	
				"fim"								(. 
														handler.newLine(); // criando uma linha com a indentação existente
														handler.append("fim", HtmlTransformer.classBlock); 
														handler.closeNewLine();
														handler.exdentNewLine(); // decrementando a indentação. "Limpando estado"
													.)
	.

    ProcedureDeclaration
    = "procedimento"							(. handler.newLine(); .)
        ident 									(. handler.append("procedimento " + t.val, HtmlTransformer.classFunc); .)
        "("										(. handler.append("("); .)
            [
				ProcedureParams
				{
					","									(.	handler.append(", "); .) 
					ProcedureParams 
				} 
            ]
		")"												(. handler.append(")"); .)
			[
				":" "inteiro"							(. 
															handler.append(":" + " ");
															handler.append("inteiro", HtmlTransformer.classType);
														.)
			] 											(. handler.closeNewLine(); .)
    .

    ProcedureParams             		(. String paramName=""; .)
    = Variable<out paramName>        	(. .)
        ":"
			"inteiro"									(.	
															handler.append(":" + " ");
															handler.append("inteiro", HtmlTransformer.classType); 
														.) 
			[
				"[" "]"									(.	handler.append("[]"); .)
			]
    .

    Read    											(. String readFromKeyboard = ""; .)
	= "leia"											(.	
															handler.newLine();
															handler.append("leia", HtmlTransformer.classFunc); 
														.)
        "(" 											(.	handler.append("("); .)
            Variable<out readFromKeyboard> 		
		")" ";" 										(.	
															handler.append(");");
															handler.closeNewLine();
														.)
    .

	NewInteger<out String newInt> 
	= "novo" "inteiro" 									(.	handler.append("novo inteiro"); .)
		( 
			"[" 										(.	handler.append("["); .)
				Expr 
			"]"											(.	handler.append("]"); .)
			| 
			"{" 										(.	handler.append(" " + "{"); .)
				number 									(.	handler.append(t.val); .)
				{ 
					"," number 							(.	handler.append("," + " " + t.val); .)
				} 
			"}"											(.	handler.append("}"); .)
    	) (. newInt = t.val; .)
    .

    VariableDeclaration<out String declaration> 		(.	String var = ""; .)
		= "variavel"									(.
															handler.newLine();
															handler.append("variavel" + " "); 
														.)
			Variable<out var>														
        	{
				","										(.	handler.append(", "); .) 
				Variable<out var> 									
			} ":" 
			"inteiro" 									(.	
															handler.append(" "+ ":" + " ");
															handler.append("inteiro", HtmlTransformer.classType);
														.)
			[
				"[" "]"									(.	handler.append("[]"); .)
			]
			
		";" 											(.	
															handler.append(";");
															handler.closeNewLine();
															declaration = t.val;
														.)
    .

    Variable<out String var>
	=  ident 											(. 
															handler.append(t.val);
															var = t.val;
														.)
	.

	ConstantDeclaration									(.	String declaredConstant = ""; .)
	= "constante" 										(.	
															handler.newLine();
															handler.append("constante" + " ", HtmlTransformer.classType); 
														.)
		Constant<out declaredConstant>
			"=" 										(.	handler.append(" " + "=" + " "); .)
		number 											(.	handler.append(t.val); .)
		";"												(.	
															handler.append(";");
															handler.closeNewLine(); 
														.)
	.

	Constant<out String constant>
	= constantNumber (. handler.append(t.val); constant = t.val; .)
	.
	
	Expr
	= AriExpr
		[
			RelOp
			AriExpr
		]
	.

	AriExpr
	= Term
		{
			(
				"+"										(.	handler.append(" " + "+" + " "); .)
				| "-"									(.	handler.append(" " + "-" + " "); .)
			)
			Term
		}
		
	.

	Term
	= Fator
		{
			(
				"*"										(.	handler.append(" " + "*" + " "); .)
				| "/"									(.	handler.append(" " + "/" + " "); .)
				| "%"									(.	handler.append(" " + "%" + " "); .)
			)
			Fator
		}
	.

	Fator (. String cons = ""; .)
	= Name
		| number										(.	handler.append(t.val); .)
		| "-"											(.	handler.append("-"); .) 
			Fator
		| 	"("											(.	handler.append("("); .)
				Expr 
			")"											(.	handler.append(")"); .)
		| Constant<out cons>
	.

	Name
	= 
	ident												(.	
															if(la.val.equals("("))
																handler.append(t.val, HtmlTransformer.classFunc);
															else handler.append(t.val);
														.)
		[ 
			"("											(.	handler.append("("); .)
			[ 
				ArgList 
			] 
			")" 										(.	handler.append(")"); .)
		| 
			"[" 										(.	handler.append("["); .)
				Expr 
			"]" 										(.	handler.append("]"); .)
		]
	.

	ArgList
	= Expr { 
		","												(.	handler.append("," + " "); .) 
	Expr }
	.
	
	RelOp
	= "=="												(.	handler.append(" " + "==" + " "); .)
		|"!="											(.	handler.append(" " + "!=" + " "); .)
		| "<"											(.	handler.append(" " + "<" + " "); .)
		| ">" 											(.	handler.append(" " + ">" + " "); .)
		| "<="											(.	handler.append(" " + "<=" + " "); .)
		| ">="											(.	handler.append(" " + ">=" + " "); .)
	.

END UPortugol.