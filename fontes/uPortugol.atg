import java.io.*;
import java.util.ArrayList;

/**
 * @Author: Gabriel Rocha de Lima (grl@icomp.ufam.edu.br)
 * Exerc√≠cio de Compiladores lecionado por Marco Cristo (Icomp/UFAM)
 * Icomp/UFAM - AM - Brasil
 * Sun Nov, 15, 2020
 */

class SemanticAnalyzerAndHtmlTransformer {
    ArrayList<String> inputWords;
    ArrayList<String> placeHolders;
    String line;
    String outputString;

    public SemanticAnalyzerAndHtmlTransformer() {
        this.line = "";
        this.outputString = "";
        this.inputWords = new ArrayList();
        this.placeHolders = new ArrayList();
    }

    public void debugln(String s) {
        System.out.println(s);
    }
    public void debug(String s) {
        System.out.print(s + " ");
    }

}

COMPILER UPortugol

SemanticAnalyzerAndHtmlTransformer handler = new SemanticAnalyzerAndHtmlTransformer();

CHARACTERS
	letterLower = 'a'..'z' .
	letterUpper = 'A'..'Z' .
    letra = 'A'..'Z' + 'a'..'z'.
    upperLetters = 'A'..'Z' .
    digit = "0123456789".

TOKENS
    ident = letterLower { letterLower | letterUpper | digit } .
	number = digit { digit } .
	constantNumber = letterUpper { letterUpper } .

IGNORE '\t' + '\r' + '\n'

PRODUCTIONS
    UPortugol   (. String declaration = ""; .)
	= NewInteger<out declaration>  (. /*System.out.println(t.val);*/ .)
		{ 
			NewInteger<out declaration> (. /*System.out.println(t.val);*/ .)
		}
    .


    Read    									(. String readFromKeyboard = ""; .)
    = "leia"									(. handler.debug(t.val); .)
        "(" 
            Variable<out readFromKeyboard> 		(. handler.debug(readFromKeyboard); .)
        ")" ";" 
    .

	ProcedureCall								(. String argument = ""; .)
	= ident
		"("
			[
				AriExpr { "," AriExpr }
			]
		")"
		{ 
			ProcedureCall
		}
	.

    ProcedureDeclaration
    = "procedimento"
        ident 									(. handler.debug(t.val); .)
        "("
            [
				ProcedureParams
				{
					"," ProcedureParams 
				} 
            ]
        ")" [":" "inteiro"] (. .)
    .

    ProcedureParams             		(. String paramName=""; .)
    = Variable<out paramName>        	(. .)
        ":"
            "inteiro" ["[" "]"]
    .

	/** 
	 * novo inteiro [12] 
	 * novo inteiro {1 , 2 , 3, 4}
	 * */

	NewInteger<out String newInt> 
	= "novo" "inteiro" 
		( 
			"[" 
				number 
			"]" ";"
			| 
			"{" 
				number 
				{ 
					"," number 
				} 
			"}" ";"
    	) (. newInt = t.val; .)
    .

    VariableDeclaration<out String declaration> 					(. String var = ""; .)
    	= "variavel" Variable<out var> 									
        	{
            	"," Variable<out var> 									
			} ":" 

			"inteiro" ["[" "]"]
			
		";" 														(. declaration = t.val; .)
    .

    Variable<out String var>
    =  ident (. handler.debug(t.val); var = t.val; .)
	.

	ConstantDeclaration									(. String declaredConstant = ""; .)
	= "constante" Constant<out declaredConstant>
			"=" number 									(. handler.debugln(t.val); .)
		";"
	.

	Constant<out String constant>
	= constantNumber (. handler.debug(t.val); constant = t.val; .)
	.
	
	Expr
	= AriExpr
		[
			RelOp
			AriExpr
		]
	.

	AriExpr
	= Term
		{
			(
				"+"
				| "-"
			)
			Term
		}
		
	.

	Term
	= Fator
		{
			(
				"*"
				| "/"
				| "%"
			)
			Fator
		}
	.

	Fator (. String cons = ""; .)
	= ident
		[
			ProcedureCall
		]
		| number
		| "-" Fator
		| 	"("
				Expr 
			")"
		| Constant<out cons>
	.
	
	RelOp
	= "=="
		|"!="
		| "<"
		| ">" 
		| "<="
		| "=>"
	.

END UPortugol.